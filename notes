node pending to read: https://github.com/maxogden/art-of-node
pending exercises: http://nodeschool.io/

practical node: https://github.com/azat-co/practicalnode/tree/master/ch3/blog-express

javascript:
https://developer.mozilla.org/en-US/docs/Web/JavaScript/A_re-introduction_to_JavaScript

https://developer.mozilla.org/en-US/docs/Web/JavaScript/Introduction_to_Object-Oriented_JavaScript

The acronym CRUD refers to all of the major functions that are implemented in relational database applications. Each letter in the acronym can map to a standard SQL statement, HTTP method or DDS operation:
Operation			SQL		HTTP	DDS
Create				INSERT	PUT / POST	write
Read (Retrieve)		SELECT	GET	read / take
Update (Modify)		UPDATE	PUT / PATCH	write
Delete (Destroy)	DELETE	DELETE	dispose


- Submit data via traditional forms with full page refresh
- Submit data via REST API(AJAX HTTP requests) without page refresh
	-backbone.js, angular, ember

Under the hood, all front end frameworks use jQuery's ajax() method, so we will be using REST API end points via jQuery ajax() method 

########## Main folders in express.js

node_modules: dependencies, express.js and connect libraries
views: jade files
routes: Node.js modules that contain request handlers
db: seed data and scripts from mongo
public: html, css, javascript

├── db
├── public
│   ├── css
│   ├── img
│   └── js
├── routes
└── views
    └── includes

    After this we will add the project metadata with NPM

    NPM is a registry and a dependency managment tool

################### package.json ##################
    npm init vs type or copy the file and npm install

    npm install express --save

    Advise to deal with dependencies, commit your node_modules folter along with the code to a git repository
    and use that instead of fetching modules according to packaje.json each time on deployment.

################# app.js #######################

main file
typical structure:

1. require dependencies
2. configure settings
3. connect to database(optional)
4. define middleware
5.define routes
6.start the server
7.start workes with clusters(optional)

The order here is important becuase requests travel from top to bottom in the chain of middleware


3.one of the ways to configure Express.js settings is to use app.set() with the name of the setting and the value



4.middleware is the backbone of express, comes in 2 flavours:
external modules as bodyParse.json from connect/express -- > app.use(bodyParser.json())
defined in the app or its modules such as app.use(function(req, res, next) {...});

middleware is nothing more than a function with three parameters: request, response, and next.

5.routes are processed in the order they are defined:

the way routes are defined in express.js is with helpers app.verb(url,fn1,fn2) where fnjs are request handlers, uverb balues are all, get, post, put, del
delete

single route catches requests of all methods on all URLs
app.all('*', function(req, res) {
	
})

res.render(viewName, data, callback(error, html)) -- > express 

6. instructions to start the server
http.createServer(app).listen(app.get('port') function() {})

####################TDD and BDD for Node.js

standalone services and REST API should be tested with TDD

rich user interface(UI)/ user experience(UX) can be tested with headless browsers as PhantomJS

npm install -g mocha --> mocha -V

hooks: suites
before, beforeEach, after(), afterEach()

all hooks and tests support asynchronous 

describe.skip it.skip() exclusivity describe.only

besides the BDD interfaces describe, it, before Mocha, supports traditional TDD interfaces

suite --> describe
test --> it
setup --> before
teardown --> after
suiteSetup --> beforeEach
suiteTeardown --> afterEach

subl test-example/test.js

in the directory of the tests: $mocha test

you can use the core modue assert or chai that is a subset of that library
var assert = require('assert')
var assert = require('chai').assert;
http://chaijs.com/api/assert/


superagent is a library to streamline the making of HTTP requests

in mocha before the test we create a server, that we shutdown once the tests are finished


killall node

heroku and node:
https://devcenter.heroku.com/articles/getting-started-with-nodejs-o

makefile: 
http://www.cprogramming.com/tutorial/makefiles.html

make tests
#########################JADE#################################
JADE is compatible with Express.js out of the box, so you only need to 
app.set('view.')

template engine is a library or framework that uses ome rules/languages to interpret data and render views.
In the case of web apps, views are HTML pages(or parts of them), but they can be JSON or XML files.
templates can be compiled into HMTL either server-side(traditional) or client-side(REST API)

JADE uses whitespace and indentation as part of its language

syntax: http://jade-lang.com/demo/
friendly: http://naltatis.github.io/jade-syntax-docs/

Any text at the beginning of a line is interpreted as an HTML
Data that are passed to the Jade template are called locals. to output the value of a variable use =
h1= title
p= body
Attributes are added by putting them into parentheses right after the tag name.
name =value format

difference between JADE and HANDLEBARS, jade allows all javascript

interpolation is achieved via #{name}. the interpolation is processed at template compilation; therefore don't use it in executable javascript

include ./includes/header
includes/partials are handled at compilation(not at runtime)

jade template --> command line

#####################HANDLEBARS##########################Í
developers cant write a lot of javascript inside the templates.

devs can install handlebars via npm with npm install handlebars or npm install handlebars --save assuming thers either node_modules or package.json in the current working directory

$node handlebars-example.js
################NODE & TEMPLATES ################

jade by default ==> app.set('view engine', 'jade')



 board.each_with_index do |cell, index|
	index % 10 == 0 ? color.rotate! : color
	chess.push(cell + color[0])
	color.rotate!
  end



